}
W
max(W)
min(W)
plot(1:230, W, type="l")
# 2. Compute p-values
p_values <- 1 - pchisq(W, df = p)
p_values
alpha <- 0.1
change_points <- which(p_values < alpha)
change_points
T <- nrow(theta_mat)
p <- ncol(theta_mat)
W <- numeric(T - 1)
z_list <- vector("list", T - 1)
p_univ <- vector("list", T - 1)
for (t in 2:T) {
idx_t      <- ((t-1)*p + 1):(t*p)
idx_prev   <- ((t-2)*p + 1):((t-1)*p)
cov_tt     <- cov_theta[idx_t,    idx_t]
cov_prev   <- cov_theta[idx_prev, idx_prev]
cov_diff   <- cov_tt + cov_prev
d_vec      <- theta_mat[t, ] - theta_mat[t-1, ]
# joint test
W[t-1]     <- as.numeric(t(d_vec) %*% ginv(cov_diff) %*% d_vec)
# univariate tests
se_vec     <- sqrt(diag(cov_diff))
z_list[[t-1]]   <- d_vec / se_vec
p_univ[[t-1]]   <- 2 * pnorm(-abs(z_list[[t-1]]))
}
# Joint p-values
p_joint <- 1 - pchisq(W, df = p)
p_univ
p_univ
p_univ[[1]]
i <- 1
min(p_univ[[i]])
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]]) < 0.1 ){
paste0('t_iter =', t_iter, 'p-values =',  min(p_univ[[t_iter]]))
}
}
?min
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.1 ){
paste0('t_iter =', t_iter, 'p-values =',  min(p_univ[[t_iter]]))
}
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.1 ){
paste0('t_iter =', t_iter, 'p-values =',  min(p_univ[[t_iter]]))
}
}
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.5 ){
paste0('t_iter =', t_iter, 'p-values =',  min(p_univ[[t_iter]]))
}
}
t_iter <- 1
min(p_univ[[t_iter]], na.rm = TRUE)
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.8 ){
paste0('t_iter =', t_iter, 'p-values =',  min(p_univ[[t_iter]]))
}
}
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.1 ){
cat('t_iter =', t_iter, 'p-values =',  min(p_univ[[t_iter]]))
}
}
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.1 ){
cat('t_iter =', t_iter, ', p-values =',  min(p_univ[[t_iter]]),"\n")
}
}
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(100), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-07, ADMM_iteration = 200)
result$lambda
plot(1:length(result$theta_change), result$theta_change, type="l")
theta_mat <- result$theta_mat
holder <- numeric(dim(theta_mat)[1]-1)
for(i in 1:length(holder)){
holder[i] = norm(theta_mat[i+1,] - theta_mat[i,], "2")
}
plot(1:length(holder),holder,type='l')
output <- cal_cov(MITphone, theta_mat, directed=FALSE, network_stats=c("edges","isolates","triangles"), node_attr = NA)
A_inv <- ginv(-output$B_mat)
B <- output$M_mat
cov_theta <- A_inv %*% B %*% A_inv
T <- nrow(theta_mat)
p <- ncol(theta_mat)
W <- numeric(T - 1)
z_list <- vector("list", T - 1)
p_univ <- vector("list", T - 1)
for (t in 2:T) {
idx_t      <- ((t-1)*p + 1):(t*p)
idx_prev   <- ((t-2)*p + 1):((t-1)*p)
cov_tt     <- cov_theta[idx_t,    idx_t]
cov_prev   <- cov_theta[idx_prev, idx_prev]
cov_diff   <- cov_tt + cov_prev
d_vec      <- theta_mat[t, ] - theta_mat[t-1, ]
# joint test
W[t-1]     <- as.numeric(t(d_vec) %*% ginv(cov_diff) %*% d_vec)
# univariate tests
se_vec     <- sqrt(diag(cov_diff))
z_list[[t-1]]   <- d_vec / se_vec
p_univ[[t-1]]   <- 2 * pnorm(-abs(z_list[[t-1]]))
}
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.1 ){
cat('t_iter =', t_iter, ', p-values =',  min(p_univ[[t_iter]]),"\n")
}
}
# Joint p-values
p_joint <- 1 - pchisq(W, df = p)
p_joint
T <- nrow(theta_mat)
p <- ncol(theta_mat)
W <- numeric(T - 1)
z_list <- vector("list", T - 1)
p_univ <- vector("list", T - 1)
for (t in 2:T) {
idx_t      <- ((t-1)*p + 1):(t*p)
idx_prev   <- ((t-2)*p + 1):((t-1)*p)
cov_tt     <- cov_theta[idx_t,    idx_t]
cov_prev   <- cov_theta[idx_prev, idx_prev]
cov_diff   <- cov_tt + cov_prev
d_vec      <- theta_mat[t, ] - theta_mat[t-1, ]
# joint test
W[t-1]     <- as.numeric(t(d_vec) %*% ginv(cov_diff) %*% d_vec)
# univariate tests
se_vec     <- sqrt(diag(cov_diff))
z_list[[t-1]]   <- d_vec / se_vec
p_univ[[t-1]]   <- 2 * pnorm(-abs(z_list[[t-1]]))
}
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.1 ){
cat('t_iter =', t_iter, ', p-values =',  min(p_univ[[t_iter]]),"\n")
}
}
18/37 - 19/37
# Joint p-values
p_joint <- 1 - pchisq(W, df = p)
p_joint
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.1 ){
cat('t_iter =', t_iter, ', p-values =',  min(p_univ[[t_iter]]),"\n")
}
}
result$lambda
plot(1:length(result$theta_change), result$theta_change, type="l")
output <- cal_cov(MITphone, theta_mat, directed=FALSE, network_stats=c("edges","isolates","triangles"), node_attr = NA)
A_inv <- ginv(-output$B_mat)
cov_theta <- A_inv
T <- nrow(theta_mat)
p <- ncol(theta_mat)
W <- numeric(T - 1)
for (t in 2:T) {
idx_t <- ((t-1)*p + 1):(t*p)
idx_t_prev <- ((t-2)*p + 1):((t-1)*p)
cov_tt <- cov_theta[idx_t, idx_t]
cov_t_prev <- cov_theta[idx_t_prev, idx_t_prev]
cov_diff <- cov_tt + cov_t_prev# - cov_cross - t(cov_cross)
delta_theta <- theta_mat[t, ] - theta_mat[t-1, ] # t(delta_theta) %*% delta_theta
W[t-1] <- t(delta_theta) %*% ginv(cov_diff) %*% delta_theta
}
W
max(W)
min(W)
plot(1:230, W, type="l")
# 2. Compute p-values
p_values <- 1 - pchisq(W, df = p)
p_values
alpha <- 0.1
change_points <- which(p_values < alpha)
change_points
plot(1:length(result$theta_change), result$theta_change, type="l")
data(MITphone)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(50, 100), verbose = TRUE,
theta_iter = 20,
z_iter = 40,
theta_tol = 1e-3,
ADMM_tol = 1e-07, ADMM_iteration = 200)
result$lambda
plot(1:length(result$theta_change), result$theta_change, type="l")
output <- cal_cov(MITphone, theta_mat, directed=FALSE, network_stats=c("edges","isolates","triangles"), node_attr = NA)
theta_mat <- result$theta_mat
output <- cal_cov(MITphone, theta_mat, directed=FALSE, network_stats=c("edges","isolates","triangles"), node_attr = NA)
A_inv <- ginv(-output$B_mat)
B <- output$M_mat
cov_theta <- A_inv %*% B %*% A_inv
T <- nrow(theta_mat)
p <- ncol(theta_mat)
W <- numeric(T - 1)
for (t in 2:T) {
idx_t <- ((t-1)*p + 1):(t*p)
idx_t_prev <- ((t-2)*p + 1):((t-1)*p)
cov_tt <- cov_theta[idx_t, idx_t]
cov_t_prev <- cov_theta[idx_t_prev, idx_t_prev]
cov_diff <- cov_tt + cov_t_prev# - cov_cross - t(cov_cross)
delta_theta <- theta_mat[t, ] - theta_mat[t-1, ] # t(delta_theta) %*% delta_theta
W[t-1] <- t(delta_theta) %*% ginv(cov_diff) %*% delta_theta
}
W
max(W)
min(W)
plot(1:230, W, type="l")
# 2. Compute p-values
p_values <- 1 - pchisq(W, df = p)
p_values
alpha <- 0.1
change_points <- which(p_values < alpha)
change_points
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(100), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-07, ADMM_iteration = 200)
data(MITphone)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(100), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-07, ADMM_iteration = 200)
result$lambda
plot(1:length(result$theta_change), result$theta_change, type="l")
theta_mat <- result$theta_mat
output <- cal_cov(MITphone, theta_mat, directed=FALSE, network_stats=c("edges","isolates","triangles"), node_attr = NA)
A_inv <- ginv(-output$B_mat)
B <- output$M_mat
cov_theta <- A_inv %*% B %*% A_inv
T <- nrow(theta_mat)
p <- ncol(theta_mat)
W <- numeric(T - 1)
for (t in 2:T) {
idx_t <- ((t-1)*p + 1):(t*p)
idx_t_prev <- ((t-2)*p + 1):((t-1)*p)
cov_tt <- cov_theta[idx_t, idx_t]
cov_t_prev <- cov_theta[idx_t_prev, idx_t_prev]
cov_diff <- cov_tt + cov_t_prev# - cov_cross - t(cov_cross)
delta_theta <- theta_mat[t, ] - theta_mat[t-1, ] # t(delta_theta) %*% delta_theta
W[t-1] <- t(delta_theta) %*% ginv(cov_diff) %*% delta_theta
}
W
max(W)
min(W)
plot(1:230, W, type="l")
# 2. Compute p-values
p_values <- 1 - pchisq(W, df = p)
p_values
alpha <- 0.1
change_points <- which(p_values < alpha)
change_points
T <- nrow(theta_mat)
p <- ncol(theta_mat)
W <- numeric(T - 1)
z_list <- vector("list", T - 1)
p_univ <- vector("list", T - 1)
for (t in 2:T) {
idx_t      <- ((t-1)*p + 1):(t*p)
idx_prev   <- ((t-2)*p + 1):((t-1)*p)
cov_tt     <- cov_theta[idx_t,    idx_t]
cov_prev   <- cov_theta[idx_prev, idx_prev]
cov_diff   <- cov_tt + cov_prev
d_vec      <- theta_mat[t, ] - theta_mat[t-1, ]
# joint test
W[t-1]     <- as.numeric(t(d_vec) %*% ginv(cov_diff) %*% d_vec)
# univariate tests
se_vec     <- sqrt(diag(cov_diff))
z_list[[t-1]]   <- d_vec / se_vec
p_univ[[t-1]]   <- 2 * pnorm(-abs(z_list[[t-1]]))
}
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.1 ){
cat('t_iter =', t_iter, ', p-values =',  min(p_univ[[t_iter]]),"\n")
}
}
# Joint p-values
p_joint <- 1 - pchisq(W, df = p)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(10,20,30), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-07, ADMM_iteration = 200)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(10,50), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-07, ADMM_iteration = 200)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(10,50), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-06, ADMM_iteration = 200)
result$lambda
plot(1:length(result$theta_change), result$theta_change, type="l")
theta_mat <- result$theta_mat
output <- cal_cov(MITphone, theta_mat, directed=FALSE, network_stats=c("edges","isolates","triangles"), node_attr = NA)
A_inv <- ginv(-output$B_mat)
B <- output$M_mat
cov_theta <- A_inv %*% B %*% A_inv
T <- nrow(theta_mat)
p <- ncol(theta_mat)
W <- numeric(T - 1)
for (t in 2:T) {
idx_t <- ((t-1)*p + 1):(t*p)
idx_t_prev <- ((t-2)*p + 1):((t-1)*p)
cov_tt <- cov_theta[idx_t, idx_t]
cov_t_prev <- cov_theta[idx_t_prev, idx_t_prev]
cov_diff <- cov_tt + cov_t_prev# - cov_cross - t(cov_cross)
delta_theta <- theta_mat[t, ] - theta_mat[t-1, ] # t(delta_theta) %*% delta_theta
W[t-1] <- t(delta_theta) %*% ginv(cov_diff) %*% delta_theta
}
W
max(W)
min(W)
plot(1:230, W, type="l")
# 2. Compute p-values
p_values <- 1 - pchisq(W, df = p)
p_values
alpha <- 0.1
change_points <- which(p_values < alpha)
change_points
remove.packages("CPDstergm")
library(devtools)
install_github("allenkei/CPDstergm", force = TRUE)
library(CPDstergm)
library(MASS)
data(MITphone)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(100), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-07, ADMM_iteration = 200)
remove.packages("CPDstergm")
library(devtools)
install_github("allenkei/CPDstergm", force = TRUE)
library(CPDstergm)
library(MASS)
data(MITphone)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(100), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-07, ADMM_iteration = 200)
result$theta_change_MAD
library(devtools)
install_github("allenkei/CPDstergm", force = TRUE)
data(MITphone)
library(CPDstergm)
library(MASS)
data(MITphone)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(100), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-05, ADMM_iteration = 200)
result$theta_change_MAD
plot(1:length(result$theta_change), result$theta_change, type="l")
plot(1:length(result$theta_change_MAD), result$theta_change_MAD, type="l")
plot(1:length(result$theta_change), result$theta_change, type="l")
plot(1:length(result$theta_change_MAD), result$theta_change_MAD, type="l")
plot(1:length(result$theta_change), result$theta_change, type="l")
plot(1:length(result$theta_change_MAD), result$theta_change_MAD, type="l")
plot(1:length(result$theta_change), result$theta_change, type="l")
plot(1:length(result$theta_change_MAD), result$theta_change_MAD, type="l")
plot(1:length(result$theta_change), result$theta_change, type="l")
plot(1:length(result$theta_change_MAD), result$theta_change_MAD, type="l")
library(devtools)
install_github("allenkei/CPDstergm", force = TRUE)
remove.packages("CPDstergm")
library(devtools)
install_github("allenkei/CPDstergm", force = TRUE)
library(CPDstergm)
library(MASS)
data(MITphone)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(100), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-05, ADMM_iteration = 200)
result$lambda
result$theta_change_MAD
plot(1:length(result$theta_change), result$theta_change, type="l")
plot(1:length(result$theta_change_MAD), result$theta_change_MAD, type="l")
remove.packages("CPDstergm")
library(devtools)
install_github("allenkei/CPDstergm", force = TRUE)
library(CPDstergm)
library(MASS)
data(MITphone)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(100), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-05, ADMM_iteration = 200)
result$lambda
result$theta_change_MAD
plot(1:length(result$theta_change), result$theta_change, type="l")
plot(1:length(result$theta_change_MAD), result$theta_change_MAD, type="l")
remove.packages("CPDstergm")
library(devtools)
install_github("allenkei/CPDstergm", force = TRUE)
library(CPDstergm)
library(MASS)
data(MITphone)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(100), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-05, ADMM_iteration = 200)
result$lambda
result$theta_change_MAD
plot(1:length(result$theta_change), result$theta_change, type="l")
plot(1:length(result$theta_change_MAD), result$theta_change_MAD, type="l")
remove.packages("CPDstergm")
library(CPDstergm)
remove.packages("CPDstergm")
library(CPDstergm)
#install.packages("remotes")
#remotes::install_github("jonclayden/RNifti")
library(RNifti)
##### nBack
df1 <- readNifti("/Users/allen/Desktop/Brain Networks/abcd_sample/nBack/sub-NDARINVB9V0KP7H_ses-baselineYear1Arm1_task-nback_bold_atlas-Gordon2014FreeSurferSubcortical_desc-filtered_timeseries.ptseries.nii")
df2 <- readNifti("/Users/allen/Desktop/Brain Networks/abcd_sample/nBack/sub-NDARINVDX7DPE6L_ses-baselineYear1Arm1_task-nback_bold_atlas-Gordon2014FreeSurferSubcortical_desc-filtered_timeseries.ptseries.nii")
df3 <- readNifti("/Users/allen/Desktop/Brain Networks/abcd_sample/nBack/sub-NDARINVEWDP96RH_ses-baselineYear1Arm1_task-nback_bold_atlas-Gordon2014FreeSurferSubcortical_desc-filtered_timeseries.ptseries.nii")
df4 <- readNifti("/Users/allen/Desktop/Brain Networks/abcd_sample/nBack/sub-NDARINVKF3MM2R1_ses-baselineYear1Arm1_task-nback_bold_atlas-Gordon2014FreeSurferSubcortical_desc-filtered_timeseries.ptseries.nii")
df1 <- df1[,,,1,,] # sub 1
df2 <- df2[,,,1,,] # sub 2
df3 <- df3[,,,1,,] # sub 3
df4 <- df4[,,,1,,] # sub 4
dim(df1)
dim(df2)
dim(df3)
dim(df4)
data_list <- list(df1, df2, df3, df4); #rm(df1, df2, df3, df4)
# Parameters
window_size_sec <- 50  # seconds
stride_sec <- 5        # seconds
TR_sec <- 1            # Assume TR = 1 second (change if needed)
n_timepoints <- min(nrow(df1), nrow(df2), nrow(df3), nrow(df4))
window_size <- window_size_sec / TR_sec  # window size in TRs
stride <- stride_sec / TR_sec            # stride in TRs
n_layers <- length(data_list)
n_regions <- ncol(df1)
n_windows <- floor((n_timepoints - window_size) / stride) + 1
network_array <- array(NA, dim = c(n_windows, n_regions, n_regions, n_layers))
for (l in 1:n_layers) {
fmri_data <- data_list[[l]]
for (i in 1:n_windows) {
start_idx <- (i - 1) * stride + 1
end_idx <- start_idx + window_size - 1
window_data <- fmri_data[start_idx:end_idx, ]
corr_matrix <- cor(window_data)
binary_matrix <- ifelse(corr_matrix > 0.5, 1, 0)
network_array[i, , , l] <- binary_matrix
}
}
dim(network_array)
library(rTensor)
source("SBS.R")
source("CUSUM.R")
setwd("~/Documents/GitHub/MRDPG")
library(rTensor)
source("SBS.R")
source("CUSUM.R")
source("competitor.R")
dim(network_array)[1]
A.tensor <- network_array[1:136,,,] # check
num_layer <- 4
num_node <- ncol(data_list[[1]])
num_time <- dim(A.tensor)[1]
# proposed method
hat.rank <- c(10, 10, num_layer)
threshold_ratio <- c(2, 5, 10)
threshold_list <- rev(threshold_ratio * num_node*sqrt(num_layer)*(log(num_time/2))^(3/2))
intervals <- construct_intervals(num_time/2, sqrt(1/2), 4)
A.tensor.even <- A.tensor[seq(2, num_time, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_time-1, by = 2), , , ]
gains <- cusum_on_intervals(CUSUM_step1, A.tensor.even, verbose = TRUE, intervals, obj.B = B.tensor.odd)
results_g <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_time/2, CUSUM_res = gains, verbose = FALSE,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
output <- list()
for (i in 1:(length(results_g)-1)) {
detected_CP_g <- sort(results_g[[i+1]]$results[, 1])
detected_CP_gl1 <- refinement1(detected_CP_g, A.tensor.even, B.tensor.odd, hat.rank)
output[[i]] <- list()
output[[i]]$threshold <- results_g[[i+1]]$threshold
output[[i]]$thres_ratio <- rev(threshold_ratio)[i]
output[[i]]$detected_CP <- 2* detected_CP_gl1
}
output
save(output, file = paste0("real_data/results/ABCD_proposed_nBack.RData"))
dim(df1)
dim(df2)
dim(df3)
dim(df4)
dim(network_array)
