delta_theta <- theta_mat[t, ] - theta_mat[t-1, ] # t(delta_theta) %*% delta_theta
W[t-1] <- t(delta_theta) %*% ginv(cov_diff) %*% delta_theta
}
W
max(W)
min(W)
plot(1:230, W, type="l")
# 2. Compute p-values
p_values <- 1 - pchisq(W, df = p)
p_values
alpha <- 0.1
change_points <- which(p_values < alpha)
change_points
T <- nrow(theta_mat)
p <- ncol(theta_mat)
W <- numeric(T - 1)
z_list <- vector("list", T - 1)
p_univ <- vector("list", T - 1)
for (t in 2:T) {
idx_t      <- ((t-1)*p + 1):(t*p)
idx_prev   <- ((t-2)*p + 1):((t-1)*p)
cov_tt     <- cov_theta[idx_t,    idx_t]
cov_prev   <- cov_theta[idx_prev, idx_prev]
cov_diff   <- cov_tt + cov_prev
d_vec      <- theta_mat[t, ] - theta_mat[t-1, ]
# joint test
W[t-1]     <- as.numeric(t(d_vec) %*% ginv(cov_diff) %*% d_vec)
# univariate tests
se_vec     <- sqrt(diag(cov_diff))
z_list[[t-1]]   <- d_vec / se_vec
p_univ[[t-1]]   <- 2 * pnorm(-abs(z_list[[t-1]]))
}
# Joint p-values
p_joint <- 1 - pchisq(W, df = p)
p_univ
p_univ
p_univ[[1]]
i <- 1
min(p_univ[[i]])
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]]) < 0.1 ){
paste0('t_iter =', t_iter, 'p-values =',  min(p_univ[[t_iter]]))
}
}
?min
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.1 ){
paste0('t_iter =', t_iter, 'p-values =',  min(p_univ[[t_iter]]))
}
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.1 ){
paste0('t_iter =', t_iter, 'p-values =',  min(p_univ[[t_iter]]))
}
}
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.5 ){
paste0('t_iter =', t_iter, 'p-values =',  min(p_univ[[t_iter]]))
}
}
t_iter <- 1
min(p_univ[[t_iter]], na.rm = TRUE)
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.8 ){
paste0('t_iter =', t_iter, 'p-values =',  min(p_univ[[t_iter]]))
}
}
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.1 ){
cat('t_iter =', t_iter, 'p-values =',  min(p_univ[[t_iter]]))
}
}
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.1 ){
cat('t_iter =', t_iter, ', p-values =',  min(p_univ[[t_iter]]),"\n")
}
}
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(100), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-07, ADMM_iteration = 200)
result$lambda
plot(1:length(result$theta_change), result$theta_change, type="l")
theta_mat <- result$theta_mat
holder <- numeric(dim(theta_mat)[1]-1)
for(i in 1:length(holder)){
holder[i] = norm(theta_mat[i+1,] - theta_mat[i,], "2")
}
plot(1:length(holder),holder,type='l')
output <- cal_cov(MITphone, theta_mat, directed=FALSE, network_stats=c("edges","isolates","triangles"), node_attr = NA)
A_inv <- ginv(-output$B_mat)
B <- output$M_mat
cov_theta <- A_inv %*% B %*% A_inv
T <- nrow(theta_mat)
p <- ncol(theta_mat)
W <- numeric(T - 1)
z_list <- vector("list", T - 1)
p_univ <- vector("list", T - 1)
for (t in 2:T) {
idx_t      <- ((t-1)*p + 1):(t*p)
idx_prev   <- ((t-2)*p + 1):((t-1)*p)
cov_tt     <- cov_theta[idx_t,    idx_t]
cov_prev   <- cov_theta[idx_prev, idx_prev]
cov_diff   <- cov_tt + cov_prev
d_vec      <- theta_mat[t, ] - theta_mat[t-1, ]
# joint test
W[t-1]     <- as.numeric(t(d_vec) %*% ginv(cov_diff) %*% d_vec)
# univariate tests
se_vec     <- sqrt(diag(cov_diff))
z_list[[t-1]]   <- d_vec / se_vec
p_univ[[t-1]]   <- 2 * pnorm(-abs(z_list[[t-1]]))
}
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.1 ){
cat('t_iter =', t_iter, ', p-values =',  min(p_univ[[t_iter]]),"\n")
}
}
# Joint p-values
p_joint <- 1 - pchisq(W, df = p)
p_joint
T <- nrow(theta_mat)
p <- ncol(theta_mat)
W <- numeric(T - 1)
z_list <- vector("list", T - 1)
p_univ <- vector("list", T - 1)
for (t in 2:T) {
idx_t      <- ((t-1)*p + 1):(t*p)
idx_prev   <- ((t-2)*p + 1):((t-1)*p)
cov_tt     <- cov_theta[idx_t,    idx_t]
cov_prev   <- cov_theta[idx_prev, idx_prev]
cov_diff   <- cov_tt + cov_prev
d_vec      <- theta_mat[t, ] - theta_mat[t-1, ]
# joint test
W[t-1]     <- as.numeric(t(d_vec) %*% ginv(cov_diff) %*% d_vec)
# univariate tests
se_vec     <- sqrt(diag(cov_diff))
z_list[[t-1]]   <- d_vec / se_vec
p_univ[[t-1]]   <- 2 * pnorm(-abs(z_list[[t-1]]))
}
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.1 ){
cat('t_iter =', t_iter, ', p-values =',  min(p_univ[[t_iter]]),"\n")
}
}
18/37 - 19/37
# Joint p-values
p_joint <- 1 - pchisq(W, df = p)
p_joint
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.1 ){
cat('t_iter =', t_iter, ', p-values =',  min(p_univ[[t_iter]]),"\n")
}
}
result$lambda
plot(1:length(result$theta_change), result$theta_change, type="l")
output <- cal_cov(MITphone, theta_mat, directed=FALSE, network_stats=c("edges","isolates","triangles"), node_attr = NA)
A_inv <- ginv(-output$B_mat)
cov_theta <- A_inv
T <- nrow(theta_mat)
p <- ncol(theta_mat)
W <- numeric(T - 1)
for (t in 2:T) {
idx_t <- ((t-1)*p + 1):(t*p)
idx_t_prev <- ((t-2)*p + 1):((t-1)*p)
cov_tt <- cov_theta[idx_t, idx_t]
cov_t_prev <- cov_theta[idx_t_prev, idx_t_prev]
cov_diff <- cov_tt + cov_t_prev# - cov_cross - t(cov_cross)
delta_theta <- theta_mat[t, ] - theta_mat[t-1, ] # t(delta_theta) %*% delta_theta
W[t-1] <- t(delta_theta) %*% ginv(cov_diff) %*% delta_theta
}
W
max(W)
min(W)
plot(1:230, W, type="l")
# 2. Compute p-values
p_values <- 1 - pchisq(W, df = p)
p_values
alpha <- 0.1
change_points <- which(p_values < alpha)
change_points
plot(1:length(result$theta_change), result$theta_change, type="l")
data(MITphone)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(50, 100), verbose = TRUE,
theta_iter = 20,
z_iter = 40,
theta_tol = 1e-3,
ADMM_tol = 1e-07, ADMM_iteration = 200)
result$lambda
plot(1:length(result$theta_change), result$theta_change, type="l")
output <- cal_cov(MITphone, theta_mat, directed=FALSE, network_stats=c("edges","isolates","triangles"), node_attr = NA)
theta_mat <- result$theta_mat
output <- cal_cov(MITphone, theta_mat, directed=FALSE, network_stats=c("edges","isolates","triangles"), node_attr = NA)
A_inv <- ginv(-output$B_mat)
B <- output$M_mat
cov_theta <- A_inv %*% B %*% A_inv
T <- nrow(theta_mat)
p <- ncol(theta_mat)
W <- numeric(T - 1)
for (t in 2:T) {
idx_t <- ((t-1)*p + 1):(t*p)
idx_t_prev <- ((t-2)*p + 1):((t-1)*p)
cov_tt <- cov_theta[idx_t, idx_t]
cov_t_prev <- cov_theta[idx_t_prev, idx_t_prev]
cov_diff <- cov_tt + cov_t_prev# - cov_cross - t(cov_cross)
delta_theta <- theta_mat[t, ] - theta_mat[t-1, ] # t(delta_theta) %*% delta_theta
W[t-1] <- t(delta_theta) %*% ginv(cov_diff) %*% delta_theta
}
W
max(W)
min(W)
plot(1:230, W, type="l")
# 2. Compute p-values
p_values <- 1 - pchisq(W, df = p)
p_values
alpha <- 0.1
change_points <- which(p_values < alpha)
change_points
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(100), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-07, ADMM_iteration = 200)
data(MITphone)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(100), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-07, ADMM_iteration = 200)
result$lambda
plot(1:length(result$theta_change), result$theta_change, type="l")
theta_mat <- result$theta_mat
output <- cal_cov(MITphone, theta_mat, directed=FALSE, network_stats=c("edges","isolates","triangles"), node_attr = NA)
A_inv <- ginv(-output$B_mat)
B <- output$M_mat
cov_theta <- A_inv %*% B %*% A_inv
T <- nrow(theta_mat)
p <- ncol(theta_mat)
W <- numeric(T - 1)
for (t in 2:T) {
idx_t <- ((t-1)*p + 1):(t*p)
idx_t_prev <- ((t-2)*p + 1):((t-1)*p)
cov_tt <- cov_theta[idx_t, idx_t]
cov_t_prev <- cov_theta[idx_t_prev, idx_t_prev]
cov_diff <- cov_tt + cov_t_prev# - cov_cross - t(cov_cross)
delta_theta <- theta_mat[t, ] - theta_mat[t-1, ] # t(delta_theta) %*% delta_theta
W[t-1] <- t(delta_theta) %*% ginv(cov_diff) %*% delta_theta
}
W
max(W)
min(W)
plot(1:230, W, type="l")
# 2. Compute p-values
p_values <- 1 - pchisq(W, df = p)
p_values
alpha <- 0.1
change_points <- which(p_values < alpha)
change_points
T <- nrow(theta_mat)
p <- ncol(theta_mat)
W <- numeric(T - 1)
z_list <- vector("list", T - 1)
p_univ <- vector("list", T - 1)
for (t in 2:T) {
idx_t      <- ((t-1)*p + 1):(t*p)
idx_prev   <- ((t-2)*p + 1):((t-1)*p)
cov_tt     <- cov_theta[idx_t,    idx_t]
cov_prev   <- cov_theta[idx_prev, idx_prev]
cov_diff   <- cov_tt + cov_prev
d_vec      <- theta_mat[t, ] - theta_mat[t-1, ]
# joint test
W[t-1]     <- as.numeric(t(d_vec) %*% ginv(cov_diff) %*% d_vec)
# univariate tests
se_vec     <- sqrt(diag(cov_diff))
z_list[[t-1]]   <- d_vec / se_vec
p_univ[[t-1]]   <- 2 * pnorm(-abs(z_list[[t-1]]))
}
for(t_iter in 1:length(p_univ)){
if( min(p_univ[[t_iter]], na.rm = TRUE) < 0.1 ){
cat('t_iter =', t_iter, ', p-values =',  min(p_univ[[t_iter]]),"\n")
}
}
# Joint p-values
p_joint <- 1 - pchisq(W, df = p)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(10,20,30), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-07, ADMM_iteration = 200)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(10,50), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-07, ADMM_iteration = 200)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(10,50), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-06, ADMM_iteration = 200)
result$lambda
plot(1:length(result$theta_change), result$theta_change, type="l")
theta_mat <- result$theta_mat
output <- cal_cov(MITphone, theta_mat, directed=FALSE, network_stats=c("edges","isolates","triangles"), node_attr = NA)
A_inv <- ginv(-output$B_mat)
B <- output$M_mat
cov_theta <- A_inv %*% B %*% A_inv
T <- nrow(theta_mat)
p <- ncol(theta_mat)
W <- numeric(T - 1)
for (t in 2:T) {
idx_t <- ((t-1)*p + 1):(t*p)
idx_t_prev <- ((t-2)*p + 1):((t-1)*p)
cov_tt <- cov_theta[idx_t, idx_t]
cov_t_prev <- cov_theta[idx_t_prev, idx_t_prev]
cov_diff <- cov_tt + cov_t_prev# - cov_cross - t(cov_cross)
delta_theta <- theta_mat[t, ] - theta_mat[t-1, ] # t(delta_theta) %*% delta_theta
W[t-1] <- t(delta_theta) %*% ginv(cov_diff) %*% delta_theta
}
W
max(W)
min(W)
plot(1:230, W, type="l")
# 2. Compute p-values
p_values <- 1 - pchisq(W, df = p)
p_values
alpha <- 0.1
change_points <- which(p_values < alpha)
change_points
remove.packages("CPDstergm")
library(devtools)
install_github("allenkei/CPDstergm", force = TRUE)
library(CPDstergm)
library(MASS)
data(MITphone)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(100), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-07, ADMM_iteration = 200)
remove.packages("CPDstergm")
library(devtools)
install_github("allenkei/CPDstergm", force = TRUE)
library(CPDstergm)
library(MASS)
data(MITphone)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(100), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-07, ADMM_iteration = 200)
result$theta_change_MAD
library(devtools)
install_github("allenkei/CPDstergm", force = TRUE)
data(MITphone)
library(CPDstergm)
library(MASS)
data(MITphone)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(100), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-05, ADMM_iteration = 200)
result$theta_change_MAD
plot(1:length(result$theta_change), result$theta_change, type="l")
plot(1:length(result$theta_change_MAD), result$theta_change_MAD, type="l")
plot(1:length(result$theta_change), result$theta_change, type="l")
plot(1:length(result$theta_change_MAD), result$theta_change_MAD, type="l")
plot(1:length(result$theta_change), result$theta_change, type="l")
plot(1:length(result$theta_change_MAD), result$theta_change_MAD, type="l")
plot(1:length(result$theta_change), result$theta_change, type="l")
plot(1:length(result$theta_change_MAD), result$theta_change_MAD, type="l")
plot(1:length(result$theta_change), result$theta_change, type="l")
plot(1:length(result$theta_change_MAD), result$theta_change_MAD, type="l")
library(devtools)
install_github("allenkei/CPDstergm", force = TRUE)
remove.packages("CPDstergm")
library(devtools)
install_github("allenkei/CPDstergm", force = TRUE)
library(CPDstergm)
library(MASS)
data(MITphone)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(100), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-05, ADMM_iteration = 200)
result$lambda
result$theta_change_MAD
plot(1:length(result$theta_change), result$theta_change, type="l")
plot(1:length(result$theta_change_MAD), result$theta_change_MAD, type="l")
remove.packages("CPDstergm")
library(devtools)
install_github("allenkei/CPDstergm", force = TRUE)
library(CPDstergm)
library(MASS)
data(MITphone)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(100), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-05, ADMM_iteration = 200)
result$lambda
result$theta_change_MAD
plot(1:length(result$theta_change), result$theta_change, type="l")
plot(1:length(result$theta_change_MAD), result$theta_change_MAD, type="l")
remove.packages("CPDstergm")
library(devtools)
install_github("allenkei/CPDstergm", force = TRUE)
library(CPDstergm)
library(MASS)
data(MITphone)
result <- CPD_STERGM(MITphone, directed=FALSE, network_stats=c("edges", "isolates","triangle"),
list_of_lambda = c(100), verbose = TRUE,
theta_iter = 20,
z_iter = 20,
theta_tol = 1e-3,
ADMM_tol = 1e-05, ADMM_iteration = 200)
result$lambda
result$theta_change_MAD
plot(1:length(result$theta_change), result$theta_change, type="l")
plot(1:length(result$theta_change_MAD), result$theta_change_MAD, type="l")
remove.packages("CPDstergm")
library(CPDstergm)
remove.packages("CPDstergm")
library(CPDstergm)
result <- CPD_STERGM(SBM_list[[1]], directed=TRUE, network_stats=c("edges", "mutual"),
list_of_lambda = c(1), verbose = TRUE)
library(CPDstergm)
set.seed(1)
SBM_list <- sim_SBM_list(num_seq=1, n=50, rho=0.5)
result <- CPD_STERGM(SBM_list[[1]], directed=TRUE, network_stats=c("edges", "mutual"),
list_of_lambda = c(1), verbose = TRUE)
result <- CPD_STERGM(SBM_list[[1]], directed=TRUE, network_stats=c("edges", "mutual"),
list_of_lambda = c(10), verbose = TRUE)
result$est_CP
d_vec <- numeric(98) # fixed
for(i in 1:(99-1)){ d_vec[i] = sqrt( tau/ (i*(tau-i)) ) }
tau <- 99
d_vec <- numeric(tau-1) # fixed
for(i in 1:(tau-1)){ d_vec[i] = sqrt( tau/ (i*(tau-i)) ) }
d_vec
1/(d_vec^2)
sum( 1/(d_vec^2) )
sqrt( sum( 1/(d_vec^2) ) )
( 10 * 2 / (0.1) ) * sqrt( sum( 1/(d_vec^2) ) )
d_vec
d_vec^2
tau <- 99
d_vec <- numeric(tau-1) # fixed
for(i in 1:(tau-1)){ d_vec[i] = sqrt( tau/ (i*(tau-i)) ) }
sum( 1/(d_vec^2) )
dim(result$theta_mat)
theta_mat <- result$theta_mat
theta_mat <- result$theta_mat
theta_change <- numeric(98)
for(i in 1:98) theta_change[i] <- norm(theta_mat[i+1,] - theta_mat[i,],"2")
plot(1:98, theta_change, type = 'l')
median(theta_change)
median(theta_change) + 2 * mad(theta_change)
thres <- median(theta_change) + 2 * mad(theta_change)
plot(1:98, theta_change, type = 'l')
abline(h=thres, col='red')
theta_change <- numeric(98)
for(i in 1:98) theta_change[i] <- norm(theta_mat[i+1,] - theta_mat[i,],"2")^2
thres <- median(theta_change) + 2 * mad(theta_change)
plot(1:98, theta_change, type = 'l')
abline(h=thres, col='red')
median(theta_change)
mad(theta_change)
theta_change <- numeric(98)
for(i in 1:98) theta_change[i] <- norm(theta_mat[i+1,] - theta_mat[i,],"2")
thres <- median(theta_change) + 2 * mad(theta_change)
median(theta_change)
mad(theta_change)
qchisq(0.95, df = 4)
theta_change <- numeric(98)
for(i in 1:98) theta_change[i] <- norm(theta_mat[i+1,] - theta_mat[i,],"2")
thres <- median(theta_change) + qchisq(0.95, df = 4) * sd(theta_change)
plot(1:98, theta_change, type = 'l')
abline(h=thres, col='red')
thres
theta_change <- numeric(98)
for(i in 1:98) theta_change[i] <- norm(theta_mat[i+1,] - theta_mat[i,],"2")^2
thres <- median(theta_change) + qchisq(0.95, df = 4) * sd(theta_change)
plot(1:98, theta_change, type = 'l')
abline(h=thres, col='red')
thres
qchisq(0.95, df = 4)
qchisq(0.95, df = 1)
thres <- median(theta_change) + qchisq(0.95, df = 1) * sd(theta_change)
plot(1:98, theta_change, type = 'l')
abline(h=thres, col='red')
theta_mat <- result$theta_mat
cov(theta_mat)
solve(cov(theta_mat))
setwd("~/Documents/GitHub/MRDPG")
test <- 1:10
test2 <- rnorm(length(-floor(5):floor(5)))
-floor(5):floor(5)
test[ceiling(7.5):(-1)]
ceiling(7.5):(-1) + (floor(7.5) + 1)
library(CPDstergm)
